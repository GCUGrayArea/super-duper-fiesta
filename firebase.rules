rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Temporary wide-open window (your existing rule)
    function tempOpen() {
      return request.time < timestamp.date(2025, 11, 12);
    }

    // Canvases
    match /canvases/{canvasId} {
      allow read, write: if tempOpen() || request.auth != null;
    }

    // Chat messages
    match /chats/{canvasId} {
      match /messages/{messageId} {
        // Read for any authed user
        allow read: if tempOpen() || request.auth != null;

        // Create only by the authenticated user who is sending
        allow create: if tempOpen() || (
          request.auth != null &&
          request.resource.data.userId == request.auth.uid
        );

        // Update/delete allowed to author or AI message entries
        allow update, delete: if tempOpen() || (
          request.auth != null &&
          (resource.data.userId == request.auth.uid || resource.data.isAI == true)
        );
      }
    }

    // Command queue
    match /commandQueue/{canvasId} {
      match /commands/{commandId} {
        // MVP: allow any authed user; tighten later when moving processor server-side
        allow read, create, update, delete: if tempOpen() || request.auth != null;
      }
    }

    // Users (self only)
    match /users/{userId} {
      allow read, write: if tempOpen() || (
        request.auth != null && request.auth.uid == userId
      );
    }

    // Pending canvases
    match /pendingCanvases/{docId} {
      allow read, write: if tempOpen() || request.auth != null;
    }

    // Fallback: while tempOpen() is active, allow everywhere
    match /{document=**} {
      allow read, write: if tempOpen();
    }
  }
}


